//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BeautySalon.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AnastasiaEntities1 : DbContext
    {
        public AnastasiaEntities1()
            : base("name=AnastasiaEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Call> Calls { get; set; }
        public virtual DbSet<Guestbook> Guestbooks { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Акция> Акция { get; set; }
        public virtual DbSet<ГруппаМатериалов> ГруппаМатериалов { get; set; }
        public virtual DbSet<Должность> Должность { get; set; }
        public virtual DbSet<Запись> Запись { get; set; }
        public virtual DbSet<Заявка> Заявка { get; set; }
        public virtual DbSet<КатегорияУслуги> КатегорияУслуги { get; set; }
        public virtual DbSet<Клиент> Клиент { get; set; }
        public virtual DbSet<КтоЧемЗанимается> КтоЧемЗанимается { get; set; }
        public virtual DbSet<Материал> Материал { get; set; }
        public virtual DbSet<ОплатаУслуг> ОплатаУслуг { get; set; }
        public virtual DbSet<Пользователь> Пользователь { get; set; }
        public virtual DbSet<Поставщик> Поставщик { get; set; }
        public virtual DbSet<Приход> Приход { get; set; }
        public virtual DbSet<Разряды> Разряды { get; set; }
        public virtual DbSet<Расход> Расход { get; set; }
        public virtual DbSet<СоставПрихода> СоставПрихода { get; set; }
        public virtual DbSet<Сотрудник> Сотрудник { get; set; }
        public virtual DbSet<Табель> Табель { get; set; }
        public virtual DbSet<ТаблицаВремени> ТаблицаВремени { get; set; }
        public virtual DbSet<Тариф> Тариф { get; set; }
        public virtual DbSet<Услуга> Услуга { get; set; }
        public virtual DbSet<АкцияЗапрос> АкцияЗапрос { get; set; }
        public virtual DbSet<ГруппаМатериаловЗапрос> ГруппаМатериаловЗапрос { get; set; }
        public virtual DbSet<ДОЛГклиента> ДОЛГклиента { get; set; }
        public virtual DbSet<ДолжностьЗапрос> ДолжностьЗапрос { get; set; }
        public virtual DbSet<ЗаписьЗапрос> ЗаписьЗапрос { get; set; }
        public virtual DbSet<ЗаписьЗапрос1> ЗаписьЗапрос1 { get; set; }
        public virtual DbSet<КатегорияУслугиЗапрос> КатегорияУслугиЗапрос { get; set; }
        public virtual DbSet<КлиентЗапрос> КлиентЗапрос { get; set; }
        public virtual DbSet<КтоЧемЗанимаетсяЗапрос> КтоЧемЗанимаетсяЗапрос { get; set; }
        public virtual DbSet<МастерЗаписи> МастерЗаписи { get; set; }
        public virtual DbSet<МастерОказатьУслуги> МастерОказатьУслуги { get; set; }
        public virtual DbSet<МатериалЗапрос> МатериалЗапрос { get; set; }
        public virtual DbSet<ОказУслугиЗапрос> ОказУслугиЗапрос { get; set; }
        public virtual DbSet<ОКОНЧАТЕЛЬНАЯСТОИМОСТЬ> ОКОНЧАТЕЛЬНАЯСТОИМОСТЬ { get; set; }
        public virtual DbSet<ОплатаУслугЗапрос> ОплатаУслугЗапрос { get; set; }
        public virtual DbSet<ОПЛАЧЕНОклиентом> ОПЛАЧЕНОклиентом { get; set; }
        public virtual DbSet<Остаток> Остаток { get; set; }
        public virtual DbSet<ОТЧЕТпоАкции> ОТЧЕТпоАкции { get; set; }
        public virtual DbSet<ОТЧЕТпоСотруднику> ОТЧЕТпоСотруднику { get; set; }
        public virtual DbSet<ПолучитьДолжностьСотрудника> ПолучитьДолжностьСотрудника { get; set; }
        public virtual DbSet<ПользовательЗапрос> ПользовательЗапрос { get; set; }
        public virtual DbSet<ПоставщикЗапрос> ПоставщикЗапрос { get; set; }
        public virtual DbSet<ПриходЗапрос> ПриходЗапрос { get; set; }
        public virtual DbSet<РазрядЗапрос> РазрядЗапрос { get; set; }
        public virtual DbSet<РасходЗапрос> РасходЗапрос { get; set; }
        public virtual DbSet<СоставПриходаЗапрос> СоставПриходаЗапрос { get; set; }
        public virtual DbSet<СотрЗапрос> СотрЗапрос { get; set; }
        public virtual DbSet<СотрудникЗапрос> СотрудникЗапрос { get; set; }
        public virtual DbSet<ТабельЗапрос> ТабельЗапрос { get; set; }
        public virtual DbSet<ТаблицаВремениЗапрос> ТаблицаВремениЗапрос { get; set; }
        public virtual DbSet<ТарифЗапрос> ТарифЗапрос { get; set; }
        public virtual DbSet<УслугаЗапрос> УслугаЗапрос { get; set; }
    
        public virtual ObjectResult<SelectWithParam_Result> SelectWithParam(Nullable<System.DateTime> param1)
        {
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("Param1", param1) :
                new ObjectParameter("Param1", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectWithParam_Result>("SelectWithParam", param1Parameter);
        }
    
        public virtual ObjectResult<SelectWithParams_Result> SelectWithParams(Nullable<System.DateTime> param1, Nullable<int> param2)
        {
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("Param1", param1) :
                new ObjectParameter("Param1", typeof(System.DateTime));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("Param2", param2) :
                new ObjectParameter("Param2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectWithParams_Result>("SelectWithParams", param1Parameter, param2Parameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<ВыручкаПоСотруднику_Result> ВыручкаПоСотруднику(Nullable<System.DateTime> param1, Nullable<System.DateTime> param2)
        {
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("Param1", param1) :
                new ObjectParameter("Param1", typeof(System.DateTime));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("Param2", param2) :
                new ObjectParameter("Param2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ВыручкаПоСотруднику_Result>("ВыручкаПоСотруднику", param1Parameter, param2Parameter);
        }
    
        public virtual int ДобавитьАкция(string названиеАкция, Nullable<System.DateTime> датаНачала, Nullable<System.DateTime> датаОкончания, Nullable<int> скидка)
        {
            var названиеАкцияParameter = названиеАкция != null ?
                new ObjectParameter("НазваниеАкция", названиеАкция) :
                new ObjectParameter("НазваниеАкция", typeof(string));
    
            var датаНачалаParameter = датаНачала.HasValue ?
                new ObjectParameter("ДатаНачала", датаНачала) :
                new ObjectParameter("ДатаНачала", typeof(System.DateTime));
    
            var датаОкончанияParameter = датаОкончания.HasValue ?
                new ObjectParameter("ДатаОкончания", датаОкончания) :
                new ObjectParameter("ДатаОкончания", typeof(System.DateTime));
    
            var скидкаParameter = скидка.HasValue ?
                new ObjectParameter("Скидка", скидка) :
                new ObjectParameter("Скидка", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьАкция", названиеАкцияParameter, датаНачалаParameter, датаОкончанияParameter, скидкаParameter);
        }
    
        public virtual int ДобавитьГруппаМатериалов(string наименованиеГруппа)
        {
            var наименованиеГруппаParameter = наименованиеГруппа != null ?
                new ObjectParameter("НаименованиеГруппа", наименованиеГруппа) :
                new ObjectParameter("НаименованиеГруппа", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьГруппаМатериалов", наименованиеГруппаParameter);
        }
    
        public virtual int ДобавитьДолжность(string должность)
        {
            var должностьParameter = должность != null ?
                new ObjectParameter("Должность", должность) :
                new ObjectParameter("Должность", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьДолжность", должностьParameter);
        }
    
        public virtual int ДобавитьЗапись(Nullable<System.DateTime> датаЗапись, Nullable<int> кодВремя, Nullable<int> кодКлиент, Nullable<int> кодСотрудник, Nullable<int> кодАкция)
        {
            var датаЗаписьParameter = датаЗапись.HasValue ?
                new ObjectParameter("ДатаЗапись", датаЗапись) :
                new ObjectParameter("ДатаЗапись", typeof(System.DateTime));
    
            var кодВремяParameter = кодВремя.HasValue ?
                new ObjectParameter("КодВремя", кодВремя) :
                new ObjectParameter("КодВремя", typeof(int));
    
            var кодКлиентParameter = кодКлиент.HasValue ?
                new ObjectParameter("КодКлиент", кодКлиент) :
                new ObjectParameter("КодКлиент", typeof(int));
    
            var кодСотрудникParameter = кодСотрудник.HasValue ?
                new ObjectParameter("КодСотрудник", кодСотрудник) :
                new ObjectParameter("КодСотрудник", typeof(int));
    
            var кодАкцияParameter = кодАкция.HasValue ?
                new ObjectParameter("КодАкция", кодАкция) :
                new ObjectParameter("КодАкция", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьЗапись", датаЗаписьParameter, кодВремяParameter, кодКлиентParameter, кодСотрудникParameter, кодАкцияParameter);
        }
    
        public virtual int ДобавитьКатегорияУслуги(string наименованиеКатегория)
        {
            var наименованиеКатегорияParameter = наименованиеКатегория != null ?
                new ObjectParameter("НаименованиеКатегория", наименованиеКатегория) :
                new ObjectParameter("НаименованиеКатегория", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьКатегорияУслуги", наименованиеКатегорияParameter);
        }
    
        public virtual int ДобавитьКлиент(string фИОклиент, string пол, Nullable<System.DateTime> датаРожденияКлиент, string телефонКлиент, string адресКлиент, string emailКлиент, Nullable<System.DateTime> датаЗаполнения, string примечаниеКлиент)
        {
            var фИОклиентParameter = фИОклиент != null ?
                new ObjectParameter("ФИОклиент", фИОклиент) :
                new ObjectParameter("ФИОклиент", typeof(string));
    
            var полParameter = пол != null ?
                new ObjectParameter("Пол", пол) :
                new ObjectParameter("Пол", typeof(string));
    
            var датаРожденияКлиентParameter = датаРожденияКлиент.HasValue ?
                new ObjectParameter("ДатаРожденияКлиент", датаРожденияКлиент) :
                new ObjectParameter("ДатаРожденияКлиент", typeof(System.DateTime));
    
            var телефонКлиентParameter = телефонКлиент != null ?
                new ObjectParameter("ТелефонКлиент", телефонКлиент) :
                new ObjectParameter("ТелефонКлиент", typeof(string));
    
            var адресКлиентParameter = адресКлиент != null ?
                new ObjectParameter("АдресКлиент", адресКлиент) :
                new ObjectParameter("АдресКлиент", typeof(string));
    
            var emailКлиентParameter = emailКлиент != null ?
                new ObjectParameter("EmailКлиент", emailКлиент) :
                new ObjectParameter("EmailКлиент", typeof(string));
    
            var датаЗаполненияParameter = датаЗаполнения.HasValue ?
                new ObjectParameter("ДатаЗаполнения", датаЗаполнения) :
                new ObjectParameter("ДатаЗаполнения", typeof(System.DateTime));
    
            var примечаниеКлиентParameter = примечаниеКлиент != null ?
                new ObjectParameter("ПримечаниеКлиент", примечаниеКлиент) :
                new ObjectParameter("ПримечаниеКлиент", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьКлиент", фИОклиентParameter, полParameter, датаРожденияКлиентParameter, телефонКлиентParameter, адресКлиентParameter, emailКлиентParameter, датаЗаполненияParameter, примечаниеКлиентParameter);
        }
    
        public virtual int ДобавитьКтоЧемЗанимается(Nullable<int> кодДолжность, Nullable<int> кодКатегория)
        {
            var кодДолжностьParameter = кодДолжность.HasValue ?
                new ObjectParameter("КодДолжность", кодДолжность) :
                new ObjectParameter("КодДолжность", typeof(int));
    
            var кодКатегорияParameter = кодКатегория.HasValue ?
                new ObjectParameter("КодКатегория", кодКатегория) :
                new ObjectParameter("КодКатегория", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьКтоЧемЗанимается", кодДолжностьParameter, кодКатегорияParameter);
        }
    
        public virtual int ДобавитьМатериал(string наименованиеМатериал, Nullable<int> кодГруппа)
        {
            var наименованиеМатериалParameter = наименованиеМатериал != null ?
                new ObjectParameter("НаименованиеМатериал", наименованиеМатериал) :
                new ObjectParameter("НаименованиеМатериал", typeof(string));
    
            var кодГруппаParameter = кодГруппа.HasValue ?
                new ObjectParameter("КодГруппа", кодГруппа) :
                new ObjectParameter("КодГруппа", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьМатериал", наименованиеМатериалParameter, кодГруппаParameter);
        }
    
        public virtual int ДобавитьОказанныеУслуги(Nullable<int> кодЗапись, Nullable<int> кодУслуга)
        {
            var кодЗаписьParameter = кодЗапись.HasValue ?
                new ObjectParameter("КодЗапись", кодЗапись) :
                new ObjectParameter("КодЗапись", typeof(int));
    
            var кодУслугаParameter = кодУслуга.HasValue ?
                new ObjectParameter("КодУслуга", кодУслуга) :
                new ObjectParameter("КодУслуга", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьОказанныеУслуги", кодЗаписьParameter, кодУслугаParameter);
        }
    
        public virtual int ДобавитьОплата(Nullable<int> кодЗапись, Nullable<decimal> оплатаКлиента)
        {
            var кодЗаписьParameter = кодЗапись.HasValue ?
                new ObjectParameter("КодЗапись", кодЗапись) :
                new ObjectParameter("КодЗапись", typeof(int));
    
            var оплатаКлиентаParameter = оплатаКлиента.HasValue ?
                new ObjectParameter("ОплатаКлиента", оплатаКлиента) :
                new ObjectParameter("ОплатаКлиента", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьОплата", кодЗаписьParameter, оплатаКлиентаParameter);
        }
    
        public virtual int ДобавитьПользователь(string пользователь, string пароль)
        {
            var пользовательParameter = пользователь != null ?
                new ObjectParameter("Пользователь", пользователь) :
                new ObjectParameter("Пользователь", typeof(string));
    
            var парольParameter = пароль != null ?
                new ObjectParameter("Пароль", пароль) :
                new ObjectParameter("Пароль", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьПользователь", пользовательParameter, парольParameter);
        }
    
        public virtual int ДобавитьПоставщик(string наименованиеПоставщик, string телефонПоставщик, string адресПоставщик, string emailПоставщик)
        {
            var наименованиеПоставщикParameter = наименованиеПоставщик != null ?
                new ObjectParameter("НаименованиеПоставщик", наименованиеПоставщик) :
                new ObjectParameter("НаименованиеПоставщик", typeof(string));
    
            var телефонПоставщикParameter = телефонПоставщик != null ?
                new ObjectParameter("ТелефонПоставщик", телефонПоставщик) :
                new ObjectParameter("ТелефонПоставщик", typeof(string));
    
            var адресПоставщикParameter = адресПоставщик != null ?
                new ObjectParameter("АдресПоставщик", адресПоставщик) :
                new ObjectParameter("АдресПоставщик", typeof(string));
    
            var emailПоставщикParameter = emailПоставщик != null ?
                new ObjectParameter("EmailПоставщик", emailПоставщик) :
                new ObjectParameter("EmailПоставщик", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьПоставщик", наименованиеПоставщикParameter, телефонПоставщикParameter, адресПоставщикParameter, emailПоставщикParameter);
        }
    
        public virtual int ДобавитьПриход(Nullable<int> кодПоставщик, Nullable<System.DateTime> датаПриход)
        {
            var кодПоставщикParameter = кодПоставщик.HasValue ?
                new ObjectParameter("КодПоставщик", кодПоставщик) :
                new ObjectParameter("КодПоставщик", typeof(int));
    
            var датаПриходParameter = датаПриход.HasValue ?
                new ObjectParameter("ДатаПриход", датаПриход) :
                new ObjectParameter("ДатаПриход", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьПриход", кодПоставщикParameter, датаПриходParameter);
        }
    
        public virtual int ДобавитьРазряды(string разряд)
        {
            var разрядParameter = разряд != null ?
                new ObjectParameter("Разряд", разряд) :
                new ObjectParameter("Разряд", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьРазряды", разрядParameter);
        }
    
        public virtual int ДобавитьРасход(Nullable<int> кодМатериал, Nullable<int> кодСотрудник, Nullable<int> количествоРасход, Nullable<System.DateTime> датаРасход)
        {
            var кодМатериалParameter = кодМатериал.HasValue ?
                new ObjectParameter("КодМатериал", кодМатериал) :
                new ObjectParameter("КодМатериал", typeof(int));
    
            var кодСотрудникParameter = кодСотрудник.HasValue ?
                new ObjectParameter("КодСотрудник", кодСотрудник) :
                new ObjectParameter("КодСотрудник", typeof(int));
    
            var количествоРасходParameter = количествоРасход.HasValue ?
                new ObjectParameter("КоличествоРасход", количествоРасход) :
                new ObjectParameter("КоличествоРасход", typeof(int));
    
            var датаРасходParameter = датаРасход.HasValue ?
                new ObjectParameter("ДатаРасход", датаРасход) :
                new ObjectParameter("ДатаРасход", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьРасход", кодМатериалParameter, кодСотрудникParameter, количествоРасходParameter, датаРасходParameter);
        }
    
        public virtual int ДобавитьСоставПрихода(Nullable<int> кодПриход, Nullable<int> кодМатериал, Nullable<int> количествоПриход, Nullable<decimal> ценаМатериал)
        {
            var кодПриходParameter = кодПриход.HasValue ?
                new ObjectParameter("КодПриход", кодПриход) :
                new ObjectParameter("КодПриход", typeof(int));
    
            var кодМатериалParameter = кодМатериал.HasValue ?
                new ObjectParameter("КодМатериал", кодМатериал) :
                new ObjectParameter("КодМатериал", typeof(int));
    
            var количествоПриходParameter = количествоПриход.HasValue ?
                new ObjectParameter("КоличествоПриход", количествоПриход) :
                new ObjectParameter("КоличествоПриход", typeof(int));
    
            var ценаМатериалParameter = ценаМатериал.HasValue ?
                new ObjectParameter("ЦенаМатериал", ценаМатериал) :
                new ObjectParameter("ЦенаМатериал", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьСоставПрихода", кодПриходParameter, кодМатериалParameter, количествоПриходParameter, ценаМатериалParameter);
        }
    
        public virtual int ДобавитьСотрудник(string фИОсотрудник, Nullable<int> кодТариф, string телефонСотрудник, string адресСотрудник, Nullable<System.DateTime> датаРожденияСотрудник, string примечаниеСотрудник)
        {
            var фИОсотрудникParameter = фИОсотрудник != null ?
                new ObjectParameter("ФИОсотрудник", фИОсотрудник) :
                new ObjectParameter("ФИОсотрудник", typeof(string));
    
            var кодТарифParameter = кодТариф.HasValue ?
                new ObjectParameter("КодТариф", кодТариф) :
                new ObjectParameter("КодТариф", typeof(int));
    
            var телефонСотрудникParameter = телефонСотрудник != null ?
                new ObjectParameter("ТелефонСотрудник", телефонСотрудник) :
                new ObjectParameter("ТелефонСотрудник", typeof(string));
    
            var адресСотрудникParameter = адресСотрудник != null ?
                new ObjectParameter("АдресСотрудник", адресСотрудник) :
                new ObjectParameter("АдресСотрудник", typeof(string));
    
            var датаРожденияСотрудникParameter = датаРожденияСотрудник.HasValue ?
                new ObjectParameter("ДатаРожденияСотрудник", датаРожденияСотрудник) :
                new ObjectParameter("ДатаРожденияСотрудник", typeof(System.DateTime));
    
            var примечаниеСотрудникParameter = примечаниеСотрудник != null ?
                new ObjectParameter("ПримечаниеСотрудник", примечаниеСотрудник) :
                new ObjectParameter("ПримечаниеСотрудник", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьСотрудник", фИОсотрудникParameter, кодТарифParameter, телефонСотрудникParameter, адресСотрудникParameter, датаРожденияСотрудникParameter, примечаниеСотрудникParameter);
        }
    
        public virtual int ДобавитьТабель(Nullable<int> кодСотрудник, Nullable<System.DateTime> датаВыхода, Nullable<int> количествоОтработанныхЧасов)
        {
            var кодСотрудникParameter = кодСотрудник.HasValue ?
                new ObjectParameter("КодСотрудник", кодСотрудник) :
                new ObjectParameter("КодСотрудник", typeof(int));
    
            var датаВыходаParameter = датаВыхода.HasValue ?
                new ObjectParameter("ДатаВыхода", датаВыхода) :
                new ObjectParameter("ДатаВыхода", typeof(System.DateTime));
    
            var количествоОтработанныхЧасовParameter = количествоОтработанныхЧасов.HasValue ?
                new ObjectParameter("КоличествоОтработанныхЧасов", количествоОтработанныхЧасов) :
                new ObjectParameter("КоличествоОтработанныхЧасов", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьТабель", кодСотрудникParameter, датаВыходаParameter, количествоОтработанныхЧасовParameter);
        }
    
        public virtual int ДобавитьТаблицаВремени(string значениеВремя)
        {
            var значениеВремяParameter = значениеВремя != null ?
                new ObjectParameter("ЗначениеВремя", значениеВремя) :
                new ObjectParameter("ЗначениеВремя", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьТаблицаВремени", значениеВремяParameter);
        }
    
        public virtual int ДобавитьТариф(Nullable<int> кодРазряд, Nullable<int> кодДолжность, Nullable<decimal> ставка)
        {
            var кодРазрядParameter = кодРазряд.HasValue ?
                new ObjectParameter("КодРазряд", кодРазряд) :
                new ObjectParameter("КодРазряд", typeof(int));
    
            var кодДолжностьParameter = кодДолжность.HasValue ?
                new ObjectParameter("КодДолжность", кодДолжность) :
                new ObjectParameter("КодДолжность", typeof(int));
    
            var ставкаParameter = ставка.HasValue ?
                new ObjectParameter("Ставка", ставка) :
                new ObjectParameter("Ставка", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьТариф", кодРазрядParameter, кодДолжностьParameter, ставкаParameter);
        }
    
        public virtual int ДобавитьУслуга(string наименованиеУслуга, Nullable<int> кодКатегория, Nullable<decimal> ценаУслуги, string описание)
        {
            var наименованиеУслугаParameter = наименованиеУслуга != null ?
                new ObjectParameter("НаименованиеУслуга", наименованиеУслуга) :
                new ObjectParameter("НаименованиеУслуга", typeof(string));
    
            var кодКатегорияParameter = кодКатегория.HasValue ?
                new ObjectParameter("КодКатегория", кодКатегория) :
                new ObjectParameter("КодКатегория", typeof(int));
    
            var ценаУслугиParameter = ценаУслуги.HasValue ?
                new ObjectParameter("ЦенаУслуги", ценаУслуги) :
                new ObjectParameter("ЦенаУслуги", typeof(decimal));
    
            var описаниеParameter = описание != null ?
                new ObjectParameter("Описание", описание) :
                new ObjectParameter("Описание", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавитьУслуга", наименованиеУслугаParameter, кодКатегорияParameter, ценаУслугиParameter, описаниеParameter);
        }
    
        public virtual ObjectResult<ЗАРПЛАТАзаМесяц_Result> ЗАРПЛАТАзаМесяц(Nullable<int> month, Nullable<int> year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ЗАРПЛАТАзаМесяц_Result>("ЗАРПЛАТАзаМесяц", monthParameter, yearParameter);
        }
    
        public virtual int ИзменитьАкция(Nullable<int> кодАкция, string названиеАкция, Nullable<System.DateTime> датаНачала, Nullable<System.DateTime> датаОкончания, Nullable<int> скидка)
        {
            var кодАкцияParameter = кодАкция.HasValue ?
                new ObjectParameter("КодАкция", кодАкция) :
                new ObjectParameter("КодАкция", typeof(int));
    
            var названиеАкцияParameter = названиеАкция != null ?
                new ObjectParameter("НазваниеАкция", названиеАкция) :
                new ObjectParameter("НазваниеАкция", typeof(string));
    
            var датаНачалаParameter = датаНачала.HasValue ?
                new ObjectParameter("ДатаНачала", датаНачала) :
                new ObjectParameter("ДатаНачала", typeof(System.DateTime));
    
            var датаОкончанияParameter = датаОкончания.HasValue ?
                new ObjectParameter("ДатаОкончания", датаОкончания) :
                new ObjectParameter("ДатаОкончания", typeof(System.DateTime));
    
            var скидкаParameter = скидка.HasValue ?
                new ObjectParameter("Скидка", скидка) :
                new ObjectParameter("Скидка", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьАкция", кодАкцияParameter, названиеАкцияParameter, датаНачалаParameter, датаОкончанияParameter, скидкаParameter);
        }
    
        public virtual int ИзменитьГруппаМатериалов(Nullable<int> кодГруппа, string наименованиеГруппа)
        {
            var кодГруппаParameter = кодГруппа.HasValue ?
                new ObjectParameter("КодГруппа", кодГруппа) :
                new ObjectParameter("КодГруппа", typeof(int));
    
            var наименованиеГруппаParameter = наименованиеГруппа != null ?
                new ObjectParameter("НаименованиеГруппа", наименованиеГруппа) :
                new ObjectParameter("НаименованиеГруппа", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьГруппаМатериалов", кодГруппаParameter, наименованиеГруппаParameter);
        }
    
        public virtual int ИзменитьДолжность(Nullable<int> кодДолжность, string должность)
        {
            var кодДолжностьParameter = кодДолжность.HasValue ?
                new ObjectParameter("КодДолжность", кодДолжность) :
                new ObjectParameter("КодДолжность", typeof(int));
    
            var должностьParameter = должность != null ?
                new ObjectParameter("Должность", должность) :
                new ObjectParameter("Должность", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьДолжность", кодДолжностьParameter, должностьParameter);
        }
    
        public virtual int ИзменитьЗапись(Nullable<int> кодЗапись, Nullable<System.DateTime> датаЗапись, Nullable<int> кодВремя, Nullable<int> кодКлиент, Nullable<int> кодСотрудник, Nullable<int> кодАкция)
        {
            var кодЗаписьParameter = кодЗапись.HasValue ?
                new ObjectParameter("КодЗапись", кодЗапись) :
                new ObjectParameter("КодЗапись", typeof(int));
    
            var датаЗаписьParameter = датаЗапись.HasValue ?
                new ObjectParameter("ДатаЗапись", датаЗапись) :
                new ObjectParameter("ДатаЗапись", typeof(System.DateTime));
    
            var кодВремяParameter = кодВремя.HasValue ?
                new ObjectParameter("КодВремя", кодВремя) :
                new ObjectParameter("КодВремя", typeof(int));
    
            var кодКлиентParameter = кодКлиент.HasValue ?
                new ObjectParameter("КодКлиент", кодКлиент) :
                new ObjectParameter("КодКлиент", typeof(int));
    
            var кодСотрудникParameter = кодСотрудник.HasValue ?
                new ObjectParameter("КодСотрудник", кодСотрудник) :
                new ObjectParameter("КодСотрудник", typeof(int));
    
            var кодАкцияParameter = кодАкция.HasValue ?
                new ObjectParameter("КодАкция", кодАкция) :
                new ObjectParameter("КодАкция", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьЗапись", кодЗаписьParameter, датаЗаписьParameter, кодВремяParameter, кодКлиентParameter, кодСотрудникParameter, кодАкцияParameter);
        }
    
        public virtual int ИзменитьКатегорияУслуги(Nullable<int> кодКатегория, string наименованиеКатегория)
        {
            var кодКатегорияParameter = кодКатегория.HasValue ?
                new ObjectParameter("КодКатегория", кодКатегория) :
                new ObjectParameter("КодКатегория", typeof(int));
    
            var наименованиеКатегорияParameter = наименованиеКатегория != null ?
                new ObjectParameter("НаименованиеКатегория", наименованиеКатегория) :
                new ObjectParameter("НаименованиеКатегория", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьКатегорияУслуги", кодКатегорияParameter, наименованиеКатегорияParameter);
        }
    
        public virtual int ИзменитьКлиент(Nullable<int> кодКлиент, string фИОклиент, string пол, Nullable<System.DateTime> датаРожденияКлиент, string телефонКлиент, string адресКлиент, string emailКлиент, Nullable<System.DateTime> датаЗаполнения, string примечаниеКлиент)
        {
            var кодКлиентParameter = кодКлиент.HasValue ?
                new ObjectParameter("КодКлиент", кодКлиент) :
                new ObjectParameter("КодКлиент", typeof(int));
    
            var фИОклиентParameter = фИОклиент != null ?
                new ObjectParameter("ФИОклиент", фИОклиент) :
                new ObjectParameter("ФИОклиент", typeof(string));
    
            var полParameter = пол != null ?
                new ObjectParameter("Пол", пол) :
                new ObjectParameter("Пол", typeof(string));
    
            var датаРожденияКлиентParameter = датаРожденияКлиент.HasValue ?
                new ObjectParameter("ДатаРожденияКлиент", датаРожденияКлиент) :
                new ObjectParameter("ДатаРожденияКлиент", typeof(System.DateTime));
    
            var телефонКлиентParameter = телефонКлиент != null ?
                new ObjectParameter("ТелефонКлиент", телефонКлиент) :
                new ObjectParameter("ТелефонКлиент", typeof(string));
    
            var адресКлиентParameter = адресКлиент != null ?
                new ObjectParameter("АдресКлиент", адресКлиент) :
                new ObjectParameter("АдресКлиент", typeof(string));
    
            var emailКлиентParameter = emailКлиент != null ?
                new ObjectParameter("EmailКлиент", emailКлиент) :
                new ObjectParameter("EmailКлиент", typeof(string));
    
            var датаЗаполненияParameter = датаЗаполнения.HasValue ?
                new ObjectParameter("ДатаЗаполнения", датаЗаполнения) :
                new ObjectParameter("ДатаЗаполнения", typeof(System.DateTime));
    
            var примечаниеКлиентParameter = примечаниеКлиент != null ?
                new ObjectParameter("ПримечаниеКлиент", примечаниеКлиент) :
                new ObjectParameter("ПримечаниеКлиент", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьКлиент", кодКлиентParameter, фИОклиентParameter, полParameter, датаРожденияКлиентParameter, телефонКлиентParameter, адресКлиентParameter, emailКлиентParameter, датаЗаполненияParameter, примечаниеКлиентParameter);
        }
    
        public virtual int ИзменитьМатериал(Nullable<int> кодМатериал, string наименованиеМатериал, Nullable<int> кодГруппа)
        {
            var кодМатериалParameter = кодМатериал.HasValue ?
                new ObjectParameter("КодМатериал", кодМатериал) :
                new ObjectParameter("КодМатериал", typeof(int));
    
            var наименованиеМатериалParameter = наименованиеМатериал != null ?
                new ObjectParameter("НаименованиеМатериал", наименованиеМатериал) :
                new ObjectParameter("НаименованиеМатериал", typeof(string));
    
            var кодГруппаParameter = кодГруппа.HasValue ?
                new ObjectParameter("КодГруппа", кодГруппа) :
                new ObjectParameter("КодГруппа", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьМатериал", кодМатериалParameter, наименованиеМатериалParameter, кодГруппаParameter);
        }
    
        public virtual int ИзменитьОказанныеУслуги(Nullable<int> кодОказаннаяУслуга, Nullable<int> кодЗапись, Nullable<int> кодУслуга)
        {
            var кодОказаннаяУслугаParameter = кодОказаннаяУслуга.HasValue ?
                new ObjectParameter("КодОказаннаяУслуга", кодОказаннаяУслуга) :
                new ObjectParameter("КодОказаннаяУслуга", typeof(int));
    
            var кодЗаписьParameter = кодЗапись.HasValue ?
                new ObjectParameter("КодЗапись", кодЗапись) :
                new ObjectParameter("КодЗапись", typeof(int));
    
            var кодУслугаParameter = кодУслуга.HasValue ?
                new ObjectParameter("КодУслуга", кодУслуга) :
                new ObjectParameter("КодУслуга", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьОказанныеУслуги", кодОказаннаяУслугаParameter, кодЗаписьParameter, кодУслугаParameter);
        }
    
        public virtual int ИзменитьОплата(Nullable<int> кодОплата, Nullable<int> кодЗапись, Nullable<decimal> оплатаКлиента)
        {
            var кодОплатаParameter = кодОплата.HasValue ?
                new ObjectParameter("КодОплата", кодОплата) :
                new ObjectParameter("КодОплата", typeof(int));
    
            var кодЗаписьParameter = кодЗапись.HasValue ?
                new ObjectParameter("КодЗапись", кодЗапись) :
                new ObjectParameter("КодЗапись", typeof(int));
    
            var оплатаКлиентаParameter = оплатаКлиента.HasValue ?
                new ObjectParameter("ОплатаКлиента", оплатаКлиента) :
                new ObjectParameter("ОплатаКлиента", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьОплата", кодОплатаParameter, кодЗаписьParameter, оплатаКлиентаParameter);
        }
    
        public virtual int ИзменитьПользователь(Nullable<int> кодПользователя, string пользователь, string пароль)
        {
            var кодПользователяParameter = кодПользователя.HasValue ?
                new ObjectParameter("КодПользователя", кодПользователя) :
                new ObjectParameter("КодПользователя", typeof(int));
    
            var пользовательParameter = пользователь != null ?
                new ObjectParameter("Пользователь", пользователь) :
                new ObjectParameter("Пользователь", typeof(string));
    
            var парольParameter = пароль != null ?
                new ObjectParameter("Пароль", пароль) :
                new ObjectParameter("Пароль", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьПользователь", кодПользователяParameter, пользовательParameter, парольParameter);
        }
    
        public virtual int ИзменитьПоставщик(Nullable<int> кодПоставщик, string наименованиеПоставщик, string телефонПоставщик, string адресПоставщик, string emailПоставщик)
        {
            var кодПоставщикParameter = кодПоставщик.HasValue ?
                new ObjectParameter("КодПоставщик", кодПоставщик) :
                new ObjectParameter("КодПоставщик", typeof(int));
    
            var наименованиеПоставщикParameter = наименованиеПоставщик != null ?
                new ObjectParameter("НаименованиеПоставщик", наименованиеПоставщик) :
                new ObjectParameter("НаименованиеПоставщик", typeof(string));
    
            var телефонПоставщикParameter = телефонПоставщик != null ?
                new ObjectParameter("ТелефонПоставщик", телефонПоставщик) :
                new ObjectParameter("ТелефонПоставщик", typeof(string));
    
            var адресПоставщикParameter = адресПоставщик != null ?
                new ObjectParameter("АдресПоставщик", адресПоставщик) :
                new ObjectParameter("АдресПоставщик", typeof(string));
    
            var emailПоставщикParameter = emailПоставщик != null ?
                new ObjectParameter("EmailПоставщик", emailПоставщик) :
                new ObjectParameter("EmailПоставщик", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьПоставщик", кодПоставщикParameter, наименованиеПоставщикParameter, телефонПоставщикParameter, адресПоставщикParameter, emailПоставщикParameter);
        }
    
        public virtual int ИзменитьПриход(Nullable<int> кодПриход, Nullable<int> кодПоставщик, Nullable<System.DateTime> датаПриход)
        {
            var кодПриходParameter = кодПриход.HasValue ?
                new ObjectParameter("КодПриход", кодПриход) :
                new ObjectParameter("КодПриход", typeof(int));
    
            var кодПоставщикParameter = кодПоставщик.HasValue ?
                new ObjectParameter("КодПоставщик", кодПоставщик) :
                new ObjectParameter("КодПоставщик", typeof(int));
    
            var датаПриходParameter = датаПриход.HasValue ?
                new ObjectParameter("ДатаПриход", датаПриход) :
                new ObjectParameter("ДатаПриход", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьПриход", кодПриходParameter, кодПоставщикParameter, датаПриходParameter);
        }
    
        public virtual int ИзменитьРазряды(Nullable<int> кодРазряд, string разряд)
        {
            var кодРазрядParameter = кодРазряд.HasValue ?
                new ObjectParameter("КодРазряд", кодРазряд) :
                new ObjectParameter("КодРазряд", typeof(int));
    
            var разрядParameter = разряд != null ?
                new ObjectParameter("Разряд", разряд) :
                new ObjectParameter("Разряд", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьРазряды", кодРазрядParameter, разрядParameter);
        }
    
        public virtual int ИзменитьРасход(Nullable<int> кодРасход, Nullable<int> кодМатериал, Nullable<int> кодСотрудник, Nullable<int> количествоРасход, Nullable<System.DateTime> датаРасход)
        {
            var кодРасходParameter = кодРасход.HasValue ?
                new ObjectParameter("КодРасход", кодРасход) :
                new ObjectParameter("КодРасход", typeof(int));
    
            var кодМатериалParameter = кодМатериал.HasValue ?
                new ObjectParameter("КодМатериал", кодМатериал) :
                new ObjectParameter("КодМатериал", typeof(int));
    
            var кодСотрудникParameter = кодСотрудник.HasValue ?
                new ObjectParameter("КодСотрудник", кодСотрудник) :
                new ObjectParameter("КодСотрудник", typeof(int));
    
            var количествоРасходParameter = количествоРасход.HasValue ?
                new ObjectParameter("КоличествоРасход", количествоРасход) :
                new ObjectParameter("КоличествоРасход", typeof(int));
    
            var датаРасходParameter = датаРасход.HasValue ?
                new ObjectParameter("ДатаРасход", датаРасход) :
                new ObjectParameter("ДатаРасход", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьРасход", кодРасходParameter, кодМатериалParameter, кодСотрудникParameter, количествоРасходParameter, датаРасходParameter);
        }
    
        public virtual int ИзменитьСоставПрихода(Nullable<int> кодЕдиницы, Nullable<int> кодПриход, Nullable<int> кодМатериал, Nullable<int> количествоПриход, Nullable<decimal> ценаМатериал)
        {
            var кодЕдиницыParameter = кодЕдиницы.HasValue ?
                new ObjectParameter("КодЕдиницы", кодЕдиницы) :
                new ObjectParameter("КодЕдиницы", typeof(int));
    
            var кодПриходParameter = кодПриход.HasValue ?
                new ObjectParameter("КодПриход", кодПриход) :
                new ObjectParameter("КодПриход", typeof(int));
    
            var кодМатериалParameter = кодМатериал.HasValue ?
                new ObjectParameter("КодМатериал", кодМатериал) :
                new ObjectParameter("КодМатериал", typeof(int));
    
            var количествоПриходParameter = количествоПриход.HasValue ?
                new ObjectParameter("КоличествоПриход", количествоПриход) :
                new ObjectParameter("КоличествоПриход", typeof(int));
    
            var ценаМатериалParameter = ценаМатериал.HasValue ?
                new ObjectParameter("ЦенаМатериал", ценаМатериал) :
                new ObjectParameter("ЦенаМатериал", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьСоставПрихода", кодЕдиницыParameter, кодПриходParameter, кодМатериалParameter, количествоПриходParameter, ценаМатериалParameter);
        }
    
        public virtual int ИзменитьСотрудник(Nullable<int> кодСотрудник, string фИОсотрудник, Nullable<int> кодТариф, string телефонСотрудник, string адресСотрудник, Nullable<System.DateTime> датаРожденияСотрудник, string примечаниеСотрудник)
        {
            var кодСотрудникParameter = кодСотрудник.HasValue ?
                new ObjectParameter("КодСотрудник", кодСотрудник) :
                new ObjectParameter("КодСотрудник", typeof(int));
    
            var фИОсотрудникParameter = фИОсотрудник != null ?
                new ObjectParameter("ФИОсотрудник", фИОсотрудник) :
                new ObjectParameter("ФИОсотрудник", typeof(string));
    
            var кодТарифParameter = кодТариф.HasValue ?
                new ObjectParameter("КодТариф", кодТариф) :
                new ObjectParameter("КодТариф", typeof(int));
    
            var телефонСотрудникParameter = телефонСотрудник != null ?
                new ObjectParameter("ТелефонСотрудник", телефонСотрудник) :
                new ObjectParameter("ТелефонСотрудник", typeof(string));
    
            var адресСотрудникParameter = адресСотрудник != null ?
                new ObjectParameter("АдресСотрудник", адресСотрудник) :
                new ObjectParameter("АдресСотрудник", typeof(string));
    
            var датаРожденияСотрудникParameter = датаРожденияСотрудник.HasValue ?
                new ObjectParameter("ДатаРожденияСотрудник", датаРожденияСотрудник) :
                new ObjectParameter("ДатаРожденияСотрудник", typeof(System.DateTime));
    
            var примечаниеСотрудникParameter = примечаниеСотрудник != null ?
                new ObjectParameter("ПримечаниеСотрудник", примечаниеСотрудник) :
                new ObjectParameter("ПримечаниеСотрудник", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьСотрудник", кодСотрудникParameter, фИОсотрудникParameter, кодТарифParameter, телефонСотрудникParameter, адресСотрудникParameter, датаРожденияСотрудникParameter, примечаниеСотрудникParameter);
        }
    
        public virtual int ИзменитьТабель(Nullable<int> кодТабель, Nullable<int> кодСотрудник, Nullable<System.DateTime> датаВыхода, Nullable<int> количествоОтработанныхЧасов)
        {
            var кодТабельParameter = кодТабель.HasValue ?
                new ObjectParameter("КодТабель", кодТабель) :
                new ObjectParameter("КодТабель", typeof(int));
    
            var кодСотрудникParameter = кодСотрудник.HasValue ?
                new ObjectParameter("КодСотрудник", кодСотрудник) :
                new ObjectParameter("КодСотрудник", typeof(int));
    
            var датаВыходаParameter = датаВыхода.HasValue ?
                new ObjectParameter("ДатаВыхода", датаВыхода) :
                new ObjectParameter("ДатаВыхода", typeof(System.DateTime));
    
            var количествоОтработанныхЧасовParameter = количествоОтработанныхЧасов.HasValue ?
                new ObjectParameter("КоличествоОтработанныхЧасов", количествоОтработанныхЧасов) :
                new ObjectParameter("КоличествоОтработанныхЧасов", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьТабель", кодТабельParameter, кодСотрудникParameter, датаВыходаParameter, количествоОтработанныхЧасовParameter);
        }
    
        public virtual int ИзменитьТаблицаВремени(Nullable<int> кодВремя, string значениеВремя)
        {
            var кодВремяParameter = кодВремя.HasValue ?
                new ObjectParameter("КодВремя", кодВремя) :
                new ObjectParameter("КодВремя", typeof(int));
    
            var значениеВремяParameter = значениеВремя != null ?
                new ObjectParameter("ЗначениеВремя", значениеВремя) :
                new ObjectParameter("ЗначениеВремя", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьТаблицаВремени", кодВремяParameter, значениеВремяParameter);
        }
    
        public virtual int ИзменитьТариф(Nullable<int> кодТариф, Nullable<int> кодРазряд, Nullable<int> кодДолжность, Nullable<decimal> ставка)
        {
            var кодТарифParameter = кодТариф.HasValue ?
                new ObjectParameter("КодТариф", кодТариф) :
                new ObjectParameter("КодТариф", typeof(int));
    
            var кодРазрядParameter = кодРазряд.HasValue ?
                new ObjectParameter("КодРазряд", кодРазряд) :
                new ObjectParameter("КодРазряд", typeof(int));
    
            var кодДолжностьParameter = кодДолжность.HasValue ?
                new ObjectParameter("КодДолжность", кодДолжность) :
                new ObjectParameter("КодДолжность", typeof(int));
    
            var ставкаParameter = ставка.HasValue ?
                new ObjectParameter("Ставка", ставка) :
                new ObjectParameter("Ставка", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьТариф", кодТарифParameter, кодРазрядParameter, кодДолжностьParameter, ставкаParameter);
        }
    
        public virtual int ИзменитьУслуга(Nullable<int> кодУслуга, string наименованиеУслуга, Nullable<int> кодКатегория, Nullable<decimal> ценаУслуги, string описание)
        {
            var кодУслугаParameter = кодУслуга.HasValue ?
                new ObjectParameter("КодУслуга", кодУслуга) :
                new ObjectParameter("КодУслуга", typeof(int));
    
            var наименованиеУслугаParameter = наименованиеУслуга != null ?
                new ObjectParameter("НаименованиеУслуга", наименованиеУслуга) :
                new ObjectParameter("НаименованиеУслуга", typeof(string));
    
            var кодКатегорияParameter = кодКатегория.HasValue ?
                new ObjectParameter("КодКатегория", кодКатегория) :
                new ObjectParameter("КодКатегория", typeof(int));
    
            var ценаУслугиParameter = ценаУслуги.HasValue ?
                new ObjectParameter("ЦенаУслуги", ценаУслуги) :
                new ObjectParameter("ЦенаУслуги", typeof(decimal));
    
            var описаниеParameter = описание != null ?
                new ObjectParameter("Описание", описание) :
                new ObjectParameter("Описание", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменитьУслуга", кодУслугаParameter, наименованиеУслугаParameter, кодКатегорияParameter, ценаУслугиParameter, описаниеParameter);
        }
    
        public virtual ObjectResult<КарточкаКлиента_Result> КарточкаКлиента(string param1)
        {
            var param1Parameter = param1 != null ?
                new ObjectParameter("Param1", param1) :
                new ObjectParameter("Param1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<КарточкаКлиента_Result>("КарточкаКлиента", param1Parameter);
        }
    
        public virtual ObjectResult<КоличествоКлиентов_Result> КоличествоКлиентов(Nullable<System.DateTime> param1, Nullable<System.DateTime> param2)
        {
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("Param1", param1) :
                new ObjectParameter("Param1", typeof(System.DateTime));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("Param2", param2) :
                new ObjectParameter("Param2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<КоличествоКлиентов_Result>("КоличествоКлиентов", param1Parameter, param2Parameter);
        }
    
        public virtual ObjectResult<ПолныйОтчетСотрудник_Result> ПолныйОтчетСотрудник(string param1, Nullable<System.DateTime> param2, Nullable<System.DateTime> param3)
        {
            var param1Parameter = param1 != null ?
                new ObjectParameter("Param1", param1) :
                new ObjectParameter("Param1", typeof(string));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("Param2", param2) :
                new ObjectParameter("Param2", typeof(System.DateTime));
    
            var param3Parameter = param3.HasValue ?
                new ObjectParameter("Param3", param3) :
                new ObjectParameter("Param3", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ПолныйОтчетСотрудник_Result>("ПолныйОтчетСотрудник", param1Parameter, param2Parameter, param3Parameter);
        }
    
        public virtual ObjectResult<ПолныйОтчетСотрудник2_Result> ПолныйОтчетСотрудник2(string param1)
        {
            var param1Parameter = param1 != null ?
                new ObjectParameter("Param1", param1) :
                new ObjectParameter("Param1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ПолныйОтчетСотрудник2_Result>("ПолныйОтчетСотрудник2", param1Parameter);
        }
    
        public virtual int УдалитьАкция(Nullable<int> кодАкция)
        {
            var кодАкцияParameter = кодАкция.HasValue ?
                new ObjectParameter("КодАкция", кодАкция) :
                new ObjectParameter("КодАкция", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьАкция", кодАкцияParameter);
        }
    
        public virtual int УдалитьГруппаМатериалов(Nullable<int> кодГруппа)
        {
            var кодГруппаParameter = кодГруппа.HasValue ?
                new ObjectParameter("КодГруппа", кодГруппа) :
                new ObjectParameter("КодГруппа", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьГруппаМатериалов", кодГруппаParameter);
        }
    
        public virtual int УдалитьДолжность(Nullable<int> кодДолжность)
        {
            var кодДолжностьParameter = кодДолжность.HasValue ?
                new ObjectParameter("КодДолжность", кодДолжность) :
                new ObjectParameter("КодДолжность", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьДолжность", кодДолжностьParameter);
        }
    
        public virtual int УдалитьЗапись(Nullable<int> кодЗапись)
        {
            var кодЗаписьParameter = кодЗапись.HasValue ?
                new ObjectParameter("КодЗапись", кодЗапись) :
                new ObjectParameter("КодЗапись", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьЗапись", кодЗаписьParameter);
        }
    
        public virtual int УдалитьКатегорияУслуги(Nullable<int> кодКатегория)
        {
            var кодКатегорияParameter = кодКатегория.HasValue ?
                new ObjectParameter("КодКатегория", кодКатегория) :
                new ObjectParameter("КодКатегория", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьКатегорияУслуги", кодКатегорияParameter);
        }
    
        public virtual int УдалитьКлиент(Nullable<int> кодКлиент)
        {
            var кодКлиентParameter = кодКлиент.HasValue ?
                new ObjectParameter("КодКлиент", кодКлиент) :
                new ObjectParameter("КодКлиент", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьКлиент", кодКлиентParameter);
        }
    
        public virtual int УдалитьМатериал(Nullable<int> кодМатериал)
        {
            var кодМатериалParameter = кодМатериал.HasValue ?
                new ObjectParameter("КодМатериал", кодМатериал) :
                new ObjectParameter("КодМатериал", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьМатериал", кодМатериалParameter);
        }
    
        public virtual int УдалитьОказанныеУслуги(Nullable<int> кодОказаннаяУслуга)
        {
            var кодОказаннаяУслугаParameter = кодОказаннаяУслуга.HasValue ?
                new ObjectParameter("КодОказаннаяУслуга", кодОказаннаяУслуга) :
                new ObjectParameter("КодОказаннаяУслуга", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьОказанныеУслуги", кодОказаннаяУслугаParameter);
        }
    
        public virtual int УдалитьОплата(Nullable<int> кодОплата)
        {
            var кодОплатаParameter = кодОплата.HasValue ?
                new ObjectParameter("КодОплата", кодОплата) :
                new ObjectParameter("КодОплата", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьОплата", кодОплатаParameter);
        }
    
        public virtual int УдалитьПользователь(Nullable<int> кодПользователя)
        {
            var кодПользователяParameter = кодПользователя.HasValue ?
                new ObjectParameter("КодПользователя", кодПользователя) :
                new ObjectParameter("КодПользователя", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьПользователь", кодПользователяParameter);
        }
    
        public virtual int УдалитьПоставщик(Nullable<int> кодПоставщик)
        {
            var кодПоставщикParameter = кодПоставщик.HasValue ?
                new ObjectParameter("КодПоставщик", кодПоставщик) :
                new ObjectParameter("КодПоставщик", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьПоставщик", кодПоставщикParameter);
        }
    
        public virtual int УдалитьПриход(Nullable<int> кодПриход)
        {
            var кодПриходParameter = кодПриход.HasValue ?
                new ObjectParameter("КодПриход", кодПриход) :
                new ObjectParameter("КодПриход", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьПриход", кодПриходParameter);
        }
    
        public virtual int УдалитьРазряды(Nullable<int> кодРазряд)
        {
            var кодРазрядParameter = кодРазряд.HasValue ?
                new ObjectParameter("КодРазряд", кодРазряд) :
                new ObjectParameter("КодРазряд", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьРазряды", кодРазрядParameter);
        }
    
        public virtual int УдалитьРасход(Nullable<int> кодРасход)
        {
            var кодРасходParameter = кодРасход.HasValue ?
                new ObjectParameter("КодРасход", кодРасход) :
                new ObjectParameter("КодРасход", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьРасход", кодРасходParameter);
        }
    
        public virtual int УдалитьСоставПрихода(Nullable<int> кодЕдиницы)
        {
            var кодЕдиницыParameter = кодЕдиницы.HasValue ?
                new ObjectParameter("КодЕдиницы", кодЕдиницы) :
                new ObjectParameter("КодЕдиницы", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьСоставПрихода", кодЕдиницыParameter);
        }
    
        public virtual int УдалитьСотрудник(Nullable<int> кодСотрудник)
        {
            var кодСотрудникParameter = кодСотрудник.HasValue ?
                new ObjectParameter("КодСотрудник", кодСотрудник) :
                new ObjectParameter("КодСотрудник", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьСотрудник", кодСотрудникParameter);
        }
    
        public virtual int УдалитьТабель(Nullable<int> кодТабель)
        {
            var кодТабельParameter = кодТабель.HasValue ?
                new ObjectParameter("КодТабель", кодТабель) :
                new ObjectParameter("КодТабель", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьТабель", кодТабельParameter);
        }
    
        public virtual int УдалитьТаблицаВремени(Nullable<int> кодВремя)
        {
            var кодВремяParameter = кодВремя.HasValue ?
                new ObjectParameter("КодВремя", кодВремя) :
                new ObjectParameter("КодВремя", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьТаблицаВремени", кодВремяParameter);
        }
    
        public virtual int УдалитьТариф(Nullable<int> кодТариф)
        {
            var кодТарифParameter = кодТариф.HasValue ?
                new ObjectParameter("КодТариф", кодТариф) :
                new ObjectParameter("КодТариф", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьТариф", кодТарифParameter);
        }
    
        public virtual int УдалитьУслуга(Nullable<int> кодУслуга)
        {
            var кодУслугаParameter = кодУслуга.HasValue ?
                new ObjectParameter("КодУслуга", кодУслуга) :
                new ObjectParameter("КодУслуга", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалитьУслуга", кодУслугаParameter);
        }
    }
}
